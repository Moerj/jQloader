{"version":3,"sources":["jQloader.js"],"names":[],"mappings":"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","file":"jQloader.js","sourcesContent":["/**\n * jQloader  v0.2.1\n * @license  MIT\n * Designed  and built by Moer\n * Homepage  https://moerj.github.io/jQloader\n * GitHub    https://github.com/Moerj/jQloader\n */\n\nif (typeof jQuery === 'undefined' && typeof Zepto === 'undefined') {\n    throw new Error('jQloader\\'s JavaScript requires jQuery or Zepto')\n}\n\n(() => {\n    'use strict';\n\n    const $window = $(window);\n    const $html = $('html');\n    const $body = $('body');\n    let $router;\n\n    const OPTS_DEFAULT = {\n        history: true,\n        progress: true,\n        loading: false,\n        cache: true,\n        async: true,\n        title: null,\n        // strict: true, 开启严格模式，\n        // 加载的 ajax 页面有 script 脚本时会强制重载当前页，\n        // 用于清空页面所有ajax 残留 js，防止 js 重复绑定等问题\n        strict: false\n    }\n\n\n    // 对一个 dom 建立jQloader的存储机制 \n    const JQloader = (dom) => {\n        if (dom._jQloader === undefined) {\n            dom._jQloader = {}\n        }\n        return {\n            get: (key) => {\n                return dom._jQloader[key]\n            },\n            set: (key, val) => {\n                dom._jQloader[key] = val\n            },\n            push: (key, val) => {\n                if (dom._jQloader[key] === undefined) {\n                    dom._jQloader[key] = []\n                }\n                dom._jQloader[key].push(val)\n            }\n        }\n    }\n\n    // 进度条\n    class ProgressBar {\n        constructor() {\n            this.color = '#58a2d1';\n            this.transition = '10s width';\n            this.timer = null;\n            this.$progress = $('<span class=\"jQloader-ProgressBar\"></span>');\n            this.reset();\n            $html.append(this.$progress);\n        }\n        reset() {\n            this.$progress.css({\n                backgroundColor: this.color,\n                transition: 'none',\n                height: '2px',\n                width: 0,\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                zIndex: 9999,\n                boxShadow: '1px 1px 2px 0 ' + this.color\n            });\n        }\n        max() {\n            return document.body.clientWidth\n        }\n        setColor(color) {\n            if (typeof color === 'string') {\n                this.color = color;\n            }\n        }\n        start() {\n            this.reset();\n            this.$progress.css({\n                width: this.max(),\n                transition: this.transition\n            });\n        }\n        stop() {\n            this.$progress.css({\n                width: this.$progress.width()\n            });\n        }\n        finish() {\n            this.stop();\n            this.$progress.css({\n                width: this.max(),\n                transition: '0.5s width'\n            });\n            if (!this.timer) {\n                this.timer = setTimeout(() => {\n                    this.timer = null;\n                    this.reset();\n                }, 700)\n            }\n        }\n    }\n\n    // 容器加载 loading 效果\n    class Loading {\n        constructor() {\n            this.$element = $('<div class=\"jQloader-loading\">\\\n                                    <div class=\"loadingBox\">\\\n                                        <span class=\"loadingEffect fa fa-spin fa-spinner\"></span>\\\n                                        <span class=\"loadingText\"> loading...</span>\\\n                                    </div>\\\n                                </div>');\n            this.$loadingEffect = this.$element.find('.loadingEffect');\n            this.$loadingText = this.$element.find('.loadingText');\n            this.$loadingBox = this.$element.find('.loadingBox');\n\n            this.$element.css({\n                width: $window.width(),\n                height: $window.height(),\n                position: 'absolute',\n                zIndex: 9999,\n                top: 0,\n                left: 0,\n                display: 'none'\n            })\n            this.$loadingBox.css({\n                position: 'absolute',\n                padding: '5px 15px',\n                top: '50%',\n                left: '50%',\n                transform: 'translate3d(-50%,-50%,0)',\n                background: 'rgba(0, 0, 0, 0.3)',\n                textAlign: 'center',\n                lineHeight: '80px',\n                color: '#fff',\n                fontSize: '16px'\n            })\n\n            $html.append(this.$element);\n        }\n        _reSize() {\n            this.$element.css({\n                width: $window.width(),\n                height: $window.height()\n            });\n        }\n        show() {\n            this._reSize();\n            this.$element.show();\n        }\n        hide() {\n            this.$element.hide();\n        }\n    }\n\n\n\n    // 编译当前页面 html 标签上的 loadPage 指令\n    function _compile() {\n\n        // 检测路由容器\n        if (!$router || !$router.length) {\n            $router = $('jq-router').eq(0);\n        }\n\n        // 编译include\n        const _compile_jqInclude = (dom) => {\n            let $dom = $(dom);\n            let url = $dom.attr('src');\n            if (url) {\n                let $container = $('<div></div>');\n                $dom.replaceWith($container);\n                $container.loadPage({\n                    url: url,\n                    history: false,\n                    progress: false\n                }, () => {\n                    // 编译并ajax加载完成后的回调\n                    $container.children().eq(0).unwrap();\n                })\n            }\n        }\n        let includeDoms = document.getElementsByTagName('jq-include');\n        for (let i = 0; i < includeDoms.length; i++) {\n            _compile_jqInclude(includeDoms[i])\n        }\n\n    }\n\n\n    // 拦截并重写 a 标签事件\n    function _reWriteLinks() {\n\n        // 判断标签上的属性是否合法，允许默认布尔值，无参数时为 true\n        //  例如：<a strict></a> === <a strict=\"true\"></a>\n        const isAttr = (attributeObj) => {\n            let value = attributeObj.value;\n            if (value === \"false\") {\n                return false;\n            } else if (value === \"true\" || value === '') {\n                return true;\n            } else {\n                return value\n            }\n        }\n\n        $body.on('click', 'a', (e) => {\n            let a = e.currentTarget;\n\n            // load 类型\n            let loadUrl = a.getAttribute('load');\n            if (loadUrl) {\n                e.preventDefault();\n\n                let container = a.getAttribute('to');\n                let $container;\n\n                if (container) {\n                    $container = $(container)\n                } else {\n                    $container = $router\n                }\n\n                let opts = {};\n                let attrs = a.attributes;\n\n                // 将所有属性遍历，并拼装成对象\n                for (let i = 0; i < attrs.length; i++) {\n                    let attr = attrs[i];\n                    let res = isAttr(attr);\n                    if (res !== undefined) {\n                        opts[attr.nodeName] = res;\n                    }\n                }\n\n                // 需要请求的 url 就是 load 属性的值\n                opts.url = opts.load;\n\n                opts = $.extend({}, OPTS_DEFAULT, opts);\n\n\n                $container.loadPage(opts);\n\n                return;\n            }\n\n            // 锚点类型\n            let hash = a.hash;\n            if (hash) {\n                e.preventDefault();\n                let id = hash.substr(1);\n                // 用原生 js 获取 dom，因为jQuery $('')选择器获取中文的id会忽略空格。\n                let $anchor = $(document.getElementById(id));\n                let $win = $html.add($body);\n                // 滚动到锚点元素\n                if ($.fn.animate) {\n                    $win.animate({\n                        scrollTop: $anchor.offset().top + 'px'\n                    }, 300);\n                } else {\n                    $win.scrollTop($anchor.offset().top);\n                }\n\n                return;\n            }\n\n        })\n\n    }\n\n    // 载入历史记录\n    function _loadHitory() {\n        let historyData = history.state;\n        let locationHash = document.location.hash.substr(1);\n\n        if (historyData) {\n            let url = historyData.url\n            let $container;\n\n            // 指定读取历史页面的容器\n            if (historyData.id) {\n                $container = $('#' + historyData.id)\n            } else {\n                $container = $router\n            }\n\n            if (!$container || !$container.length) {\n                return;\n            }\n\n            $container.loadPage({\n                url: url,\n                history: false,\n                progress: true,\n                title: historyData.title\n            });\n\n            return;\n        }\n\n        if (locationHash && $router.length) {\n\n            $router.loadPage({\n                url: locationHash,\n                history: false,\n                progress: true\n            });\n\n            return;\n        }\n\n        // 没有 url 参数，代表当前回到无路由页面\n        // 因为用清空或者重请求等方法很难判断逻辑\n        // 强制刷新一次，释放内存，也让它真正回到首页，用sessionStorage避免死循环刷新\n        // let needReload = sessionStorage.getItem('jqRouterReload');\n        // if (needReload) {\n        //     sessionStorage.removeItem('jqRouterReload');\n        // } else {\n        //     sessionStorage.setItem('jqRouterReload', true);\n        //     window.location.replace(window.location.href);\n        // }\n        let curr = JQloader(window).get('reloadRouter')\n        if (curr) {\n            window.location.replace(window.location.href);\n        }else{\n            JQloader(window).set('reloadRouter',true)\n        }\n    }\n\n    // 地址栏改变\n    window.addEventListener(\"popstate\", () => {\n        _loadHitory()\n    });\n\n\n    // 暴露的公共方法 ==============================\n\n    // loadPage 加载完后的回调组，用于指令触发load后的回调\n    $.fn.loadFinish = function(call_back) {\n        let container = $(this);\n        JQloader(container[0]).push('loadPageCallBacks', call_back)\n        return container\n    }\n\n    // 加载一个页面\n    $.fn.loadPage = function(OPTS, call_back) {\n        let $container = $(this);\n\n        if (!$container.length) {\n            throw new Error('\\'' + this.prevObject.selector + '\\' not a vaild selector');\n        }\n\n        OPTS = $.extend({}, OPTS_DEFAULT, OPTS);\n\n        // ajax 请求完成后的一些列链式流程\n        const _todo = (OPTS, data) => {\n            let _this = {\n                strict: () => {\n                    // 严格模式强制重载有 js 的 ajax 页面\n                    if (OPTS.strict && data.indexOf('<script') >= 0) {\n                        let host = window.location.host;\n                        window.location.reload(host + '/#' + OPTS.url);\n                    }\n                    return _this;\n                },\n                history: () => {\n                    // 记录浏览器历史\n                    if (OPTS.history) {\n                        // 处理 url 格式，浏览器地址栏去掉./开头\n                        let url = OPTS.url;\n                        if (OPTS.url.substring(0, 2) === './') {\n                            url = OPTS.url.substring(2)\n                        }\n\n                        if ($container[0].localName === 'jq-router') {\n                            // 浏览器地址栏操作\n                            history.pushState({\n                                title: OPTS.title,\n                                url: OPTS.url\n                            }, '', '#' + url);\n                        } else {\n                            let hashList = window.location.hash.split(\"#\");\n                            let routerUrl = hashList[1];\n                            history.pushState({\n                                title: OPTS.title,\n                                id: $container.attr('id'),\n                                url: OPTS.url\n                            }, '', '#' + routerUrl + '#' + OPTS.url);\n                        }\n                    }\n                    return _this;\n                },\n                title: () => {\n                    // 修改页面 title\n                    if (OPTS.title) {\n                        window.document.title = OPTS.title;\n                    }\n                    return _this;\n                },\n                render: () => {\n                    // 写入页面\n                    $container.html(data);\n                    return _this;\n                },\n                zepto: () => {\n                    // 解决Zepto ajxa 请求到的页面 script 标签执行问题\n                    if (typeof Zepto != 'undefined' && typeof jQuery == 'undefined') {\n                        let script = $container.find('script');\n                        for (let i = 0; i < script.length; i++) {\n                            let src = script[i].src;\n                            if (src) {\n                                // Zepto不会运行外联script\n                                $.get(src)\n                            } else {\n                                // Zepto会执行两次页面的内联script\n                                $(script[i]).remove()\n                            }\n                        }\n                    }\n                    return _this;\n                },\n                compile: () => {\n                    // 编译新页面上的指令\n                    _compile();\n                    return _this;\n                },\n                callbacks: () => {\n                    // 运行容器上的回调方法组\n                    let callBacks = JQloader($container[0]).get('loadPageCallBacks');\n                    if (callBacks) {\n                        for (var i = 0; i < callBacks.length; i++) {\n                            callBacks[i]();\n                        }\n                    }\n                    return _this;\n                }\n\n            }\n            return _this;\n        }\n\n        // 开启 loading 进度条\n        if (OPTS.progress && !OPTS.strict) {\n            $.progressBar.start();\n        }\n\n        // 开启 loading 锁定\n        if (OPTS.loading) {\n            $.loadingMask.show();\n        }\n\n\n        // 请求页面\n        $.ajax({\n            dataType: 'html',\n            url: OPTS.url,\n            cache: OPTS.cache,\n            async: OPTS.async,\n            timeout: 10000,\n            success: (data) => {\n\n                _todo(OPTS, data)\n                    .strict()\n                    .history()\n                    .title()\n                    .render()\n                    .zepto()\n                    .compile()\n                    .callbacks();\n\n            },\n            error: () => {\n                console.warn('页面载入失败！');\n            },\n            complete: () => {\n                // 进度条结束\n                if (OPTS.progress && !OPTS.strict) {\n                    $.progressBar.finish();\n                }\n\n                // 关闭锁定\n                if (OPTS.loading) {\n                    $.loadingMask.hide();\n                }\n\n                // 本次 ajax 的回调\n                if (call_back) call_back();\n            }\n        })\n\n        return $container;\n    }\n\n\n\n\n    $(() => { // jQloader所在页面/首页初始化 dom 完毕\n\n        // 创建并暴露 进度条\n        $.progressBar = new ProgressBar();\n\n        // 创建并暴露 loading蒙层\n        $.loadingMask = new Loading();\n\n        // 重写 a 标签事件\n        _reWriteLinks();\n\n        // 执行一次编译\n        _compile();\n\n        // 请求一次浏览器历史\n        _loadHitory();\n    })\n})()"],"sourceRoot":"/source/"}